"use client"

import React, {useEffect, useState} from 'react';
import {SpinnerLoading} from "@/components/common/Loading";
import axios from "@/lib/axios";
import toast from "react-hot-toast";
import {useAuthContext} from "@/context/auth/hooks";
import {convertProductFunction} from "@/lib/utils";
import CartProductList from "@/components/pages/cart/productList";
import CartInfo from "@/components/pages/cart/cartInfo";

const CartLayout = () => {
    const [loading, setLoading] = useState(true)
    const [btnLoading, setBtnLoading] = useState(false)
    const [carts, setCarts] = useState<any>([]) //offline_carts
    const [finalPrice, setFinalPrice] = useState(0)
    const [priceCal, setPriceCal] = useState<any>([])
    let tempLoading = true
    const {user}: any = useAuthContext()
    const handleGetCarts = async () => {
        await axios.get('carts/users').then(({data}) => {
            if (data.status) {
                const products: any = convertProductFunction(data.data)
                setCarts(products)
            }
        }).catch((err) => {
            if (err?.response?.status === 404) {
                // toast.error('دوره ای برای خرید وجود ندارد!')
                setCarts([])
            }
        }).finally(() => {
            setLoading(false)
        })
    }

    useEffect(() => {
        if (user) {
            if (tempLoading) {
                const Api = async () => await handleGetCarts()
                Api()
                tempLoading = false
            }
        }
    }, [user])

    const calculateFinalPrice = () => {
        let fPrice = 0
        priceCal.map((val: any) => fPrice += val.price)
        // console.log('fPrice', fPrice)
        for (let i = 0; i < carts.length; i++) {
            if (carts[i].product.id === priceCal[i].productId) {
                const certificate = carts[i].certificate
                if (certificate !== 0) {
                    for (let j = 0; j < certificate.length; j++) {
                        fPrice += certificate[j].product.certificate_price
                    }
                }
            }
        }
        setFinalPrice(fPrice)

    }
    useEffect(() => {
        if (priceCal.length !== 0) {
            calculateFinalPrice()
        }
        // else calculateFinalPrice()
    }, [priceCal]);

    const handleDeleteProduct = async ({id}: { id: number }) => {
        const allIds = []
        allIds.push(id)
        carts.find((val: any) => val.id === id)?.certificate.map((val: any) => {
            allIds.push(val.id)
        })


        setCarts([])
        setLoading(true)
        const formData = new FormData()


        formData.append('cartIds', JSON.stringify(allIds))
        await axios.post('remove-cart', formData).then(({data}) => {
            if (data.status) {
                handleGetCarts()
                toast.success('دوره با موفقیت حذف شد')
                window.location.reload();
            }
        }).catch(() => {
            // console.log(err)
            setCarts([])
        })

    }

    const handleClickPay = async () => {

        setBtnLoading(true)
        const cartIds: any = {}
        priceCal.map((val: any) => {
            cartIds[`${val.basketId}`] = val.priceType
        })

        for (let i = 0; i < carts.length; i++) {
            if (carts[i].product.id === priceCal[i].productId) {
                const certificate = carts[i].certificate
                if (certificate !== 0) {
                    for (let j = 0; j < certificate.length; j++) {
                        cartIds[`${certificate[j].id}`] = 1
                    }
                }

            }
        }


        const formData = new FormData()
        formData.append('array_cart', JSON.stringify(cartIds))

        await axios.post('pay', formData).then((res) => {
            if (res.status === 200) {
                window.location.href = res.request.responseURL
            }
        }).catch((err) => {
            if (err?.response?.status === 500) {
                toast.error('مبلغ سبد خرید بیش از سقف مجاز (صد میلیون تومان) است ')
            }
        }).finally(() => {
            setBtnLoading(false)

        })

    }
    return (
        <div className={'flex flex-col relative min-h-[35vh]'}>
            {loading ?
                <SpinnerLoading className={'m-auto'}/>
                :
                (<>
                    {
                        carts.length === 0 ?
                            (
                                <div
                                    className={'w-full h-[60vh] flex flex-col gap-y-10 items-center justify-center overflow-hidden z-10'}>
                                    <EmptyBasketIcons/>
                                    <span className={'text-3xl'}>دوره ای برای خرید انتخاب نکرده اید!</span>
                                </div>
                            )
                            :
                            <div
                                className={"w-full flex flex-col lg:grid lg:self-center grid-cols-3 items-start py-6 z-10"}>
                                <div
                                    className={" w-full h-[362px] bg-secondary absolute"}>
                                </div>
                                <CartProductList
                                    products={carts}
                                    setPriceCal={setPriceCal}
                                    handleDeleteProduct={handleDeleteProduct}/>

                                <CartInfo
                                    count={carts.length}
                                    finalPrice={finalPrice}
                                    loading={btnLoading}
                                    handleClickPay={handleClickPay}/>
                            </div>
                    }

                </>)
            }


        </div>
    );
};

const EmptyBasketIcons = () => (
    <svg width="227" height="143" viewBox="0 0 227 143" fill="none"
         xmlns="http://www.w3.org/2000/svg">
        <path opacity="0.2"
              d="M168.375 59.5837V120.25C168.375 121.256 167.976 122.22 167.265 122.931C166.554 123.643 165.589 124.042 164.583 124.042H134.25C130.228 124.042 126.37 125.64 123.526 128.484C120.681 131.329 119.083 135.186 119.083 139.209V70.9587C119.083 66.9362 120.681 63.0785 123.526 60.2342C126.37 57.3899 130.228 55.792 134.25 55.792H164.583C165.589 55.792 166.554 56.1915 167.265 56.9025C167.976 57.6136 168.375 58.578 168.375 59.5837Z"
              fill="black"/>
        <path
            d="M159.583 52H129.25C126.307 52 123.404 52.6853 120.772 54.0015C118.139 55.3177 115.849 57.2288 114.083 59.5833C112.317 57.2288 110.028 55.3177 107.395 54.0015C104.763 52.6853 101.86 52 98.9167 52H68.5833C66.5721 52 64.6433 52.799 63.2211 54.2211C61.799 55.6433 61 57.5721 61 59.5833V120.25C61 122.261 61.799 124.19 63.2211 125.612C64.6433 127.034 66.5721 127.833 68.5833 127.833H98.9167C101.934 127.833 104.827 129.032 106.96 131.165C109.093 133.298 110.292 136.191 110.292 139.208C110.292 140.214 110.691 141.178 111.402 141.889C112.113 142.601 113.078 143 114.083 143C115.089 143 116.053 142.601 116.764 141.889C117.476 141.178 117.875 140.214 117.875 139.208C117.875 136.191 119.073 133.298 121.207 131.165C123.34 129.032 126.233 127.833 129.25 127.833H159.583C161.595 127.833 163.523 127.034 164.946 125.612C166.368 124.19 167.167 122.261 167.167 120.25V59.5833C167.167 57.5721 166.368 55.6433 164.946 54.2211C163.523 52.799 161.595 52 159.583 52ZM98.9167 120.25H68.5833V59.5833H98.9167C101.934 59.5833 104.827 60.7818 106.96 62.915C109.093 65.0482 110.292 67.9415 110.292 70.9583V124.042C107.013 121.575 103.02 120.243 98.9167 120.25ZM159.583 120.25H129.25C125.147 120.243 121.154 121.575 117.875 124.042V70.9583C117.875 67.9415 119.073 65.0482 121.207 62.915C123.34 60.7818 126.233 59.5833 129.25 59.5833H159.583V120.25ZM129.25 70.9583H148.208C149.214 70.9583 150.178 71.3578 150.889 72.0689C151.601 72.78 152 73.7444 152 74.75C152 75.7556 151.601 76.72 150.889 77.4311C150.178 78.1422 149.214 78.5417 148.208 78.5417H129.25C128.244 78.5417 127.28 78.1422 126.569 77.4311C125.858 76.72 125.458 75.7556 125.458 74.75C125.458 73.7444 125.858 72.78 126.569 72.0689C127.28 71.3578 128.244 70.9583 129.25 70.9583ZM152 89.9167C152 90.9223 151.601 91.8867 150.889 92.5978C150.178 93.3089 149.214 93.7083 148.208 93.7083H129.25C128.244 93.7083 127.28 93.3089 126.569 92.5978C125.858 91.8867 125.458 90.9223 125.458 89.9167C125.458 88.9111 125.858 87.9466 126.569 87.2356C127.28 86.5245 128.244 86.125 129.25 86.125H148.208C149.214 86.125 150.178 86.5245 150.889 87.2356C151.601 87.9466 152 88.9111 152 89.9167ZM152 105.083C152 106.089 151.601 107.053 150.889 107.764C150.178 108.476 149.214 108.875 148.208 108.875H129.25C128.244 108.875 127.28 108.476 126.569 107.764C125.858 107.053 125.458 106.089 125.458 105.083C125.458 104.078 125.858 103.113 126.569 102.402C127.28 101.691 128.244 101.292 129.25 101.292H148.208C149.214 101.292 150.178 101.691 150.889 102.402C151.601 103.113 152 104.078 152 105.083Z"
            fill="black"/>
        <path
            d="M32.0982 63.5698C32.0872 64.2207 31.9171 64.859 31.6029 65.4291C31.2886 65.9991 30.8397 66.4837 30.2952 66.8405C29.7507 67.1973 29.1272 67.4155 28.4791 67.4761C27.8309 67.5367 27.1778 67.4378 26.5766 67.1881C23.0818 65.327 19.6697 63.3004 16.2368 61.2531C15.4739 60.7374 14.9334 59.953 14.7231 59.0564C14.5129 58.1598 14.6483 57.2169 15.1025 56.4158C15.5566 55.6146 16.2961 55.0141 17.1733 54.734C18.0506 54.4539 19.0012 54.5147 19.8356 54.9044C23.3783 56.7932 26.8248 58.7991 30.1749 60.9222C31.1261 61.4598 31.5191 62.7006 32.0982 63.5698Z"
            fill="black"/>
        <path
            d="M211.535 58.5642C211.51 59.1689 211.33 59.7569 211.011 60.2713C210.692 60.7857 210.246 61.2092 209.715 61.5006C206.489 63.3825 203.263 65.2642 199.996 67.0834C199.579 67.3351 199.116 67.4997 198.634 67.5672C198.152 67.6348 197.661 67.6038 197.191 67.4762C196.722 67.3486 196.283 67.1271 195.901 66.8249C195.52 66.5228 195.203 66.1464 194.971 65.7185C194.718 65.2972 194.553 64.8291 194.484 64.3423C194.416 63.8555 194.446 63.36 194.574 62.8852C194.701 62.4105 194.923 61.9662 195.226 61.579C195.528 61.1918 195.906 60.8695 196.336 60.6314C199.562 58.7289 202.788 56.8264 206.056 55.0486C206.64 54.7263 207.3 54.5679 207.966 54.5899C208.633 54.612 209.281 54.8138 209.843 55.1739C210.404 55.5341 210.858 56.0393 211.156 56.636C211.454 57.2328 211.585 57.899 211.536 58.5642H211.535Z"
            fill="black"/>
        <path
            d="M162.958 31.6812C159.504 31.6812 157.623 28.786 158.946 26.3252C160.786 22.9338 162.751 19.5836 164.757 16.275C165.27 15.4909 166.066 14.935 166.979 14.7231C167.892 14.5113 168.851 14.6597 169.658 15.1376C170.482 15.5853 171.1 16.3374 171.378 17.2337C171.656 18.13 171.573 19.0994 171.147 19.9354C169.265 23.3682 167.342 26.801 165.232 30.1098C164.675 30.8745 163.434 31.2881 162.958 31.6812Z"
            fill="black"/>
        <path
            d="M67.749 27.545C67.794 28.3796 67.5688 29.2065 67.1069 29.9031C66.6449 30.5997 65.9708 31.1289 65.1844 31.4121C64.454 31.6999 63.6477 31.7318 62.8969 31.5027C62.1461 31.2737 61.4949 30.7971 61.0496 30.1506C58.9817 26.6971 56.9137 23.2023 54.9492 19.6246C54.6163 18.8072 54.5992 17.8952 54.9013 17.0659C55.2033 16.2366 55.8028 15.5492 56.5834 15.1373C57.3643 14.6539 58.3005 14.4875 59.2002 14.672C60.0998 14.8566 60.8949 15.3782 61.4225 16.1299C63.4904 19.5421 65.5584 23.0369 67.4402 26.4698C67.5882 26.8137 67.6919 27.175 67.749 27.545Z"
            fill="black"/>
        <path
            d="M9.35051 116.612H4.07757C3.57071 116.646 3.06229 116.576 2.58326 116.407C2.10423 116.238 1.66462 115.973 1.29119 115.629C0.917765 115.284 0.618342 114.868 0.411156 114.404C0.203969 113.94 0.0933556 113.439 0.0860505 112.931C0.0820707 112.421 0.183293 111.917 0.383382 111.448C0.583471 110.98 0.878119 110.557 1.24888 110.208C1.61965 109.859 2.05854 109.59 2.5381 109.418C3.01766 109.246 3.52755 109.174 4.03587 109.209H14.7271C15.2344 109.174 15.7434 109.245 16.2219 109.418C16.7004 109.59 17.138 109.859 17.5071 110.209C17.8763 110.559 18.169 110.981 18.3668 111.45C18.5646 111.918 18.6632 112.422 18.6563 112.931C18.6484 113.428 18.5415 113.918 18.3421 114.373C18.1426 114.829 17.8544 115.24 17.4945 115.582C17.1345 115.925 16.7099 116.192 16.2454 116.369C15.7809 116.546 15.2859 116.629 14.7892 116.612L9.35051 116.612Z"
            fill="black"/>
        <path
            d="M216.974 109.188H222.247C222.758 109.15 223.271 109.218 223.754 109.387C224.238 109.556 224.681 109.824 225.056 110.172C225.431 110.52 225.731 110.942 225.936 111.412C226.14 111.881 226.246 112.388 226.246 112.9C226.246 113.412 226.14 113.919 225.936 114.388C225.731 114.858 225.431 115.28 225.056 115.628C224.681 115.977 224.238 116.244 223.754 116.413C223.271 116.582 222.758 116.65 222.247 116.612H211.576C211.065 116.65 210.552 116.583 210.069 116.413C209.585 116.244 209.142 115.977 208.767 115.629C208.391 115.28 208.092 114.858 207.887 114.389C207.682 113.919 207.576 113.412 207.576 112.9C207.576 112.388 207.682 111.881 207.887 111.412C208.092 110.942 208.391 110.52 208.767 110.172C209.142 109.823 209.585 109.556 210.069 109.387C210.552 109.218 211.065 109.15 211.576 109.188H216.974L216.974 109.188Z"
            fill="black"/>
        <path
            d="M109.461 9.22328V3.68115C109.461 2.70485 109.849 1.76853 110.539 1.07818C111.229 0.387834 112.166 0 113.142 0C114.118 0 115.054 0.387834 115.745 1.07818C116.435 1.76853 116.823 2.70485 116.823 3.68115C116.823 7.38288 116.823 11.0637 116.823 14.7654C116.861 15.2733 116.794 15.7836 116.625 16.2644C116.457 16.7451 116.191 17.1859 115.845 17.5593C115.498 17.9326 115.079 18.2304 114.612 18.4341C114.145 18.6377 113.641 18.7428 113.132 18.7428C112.622 18.7428 112.119 18.6377 111.652 18.4341C111.185 18.2304 110.765 17.9326 110.419 17.5593C110.072 17.1859 109.806 16.7451 109.638 16.2644C109.47 15.7836 109.403 15.2733 109.44 14.7654C109.419 12.9248 109.461 11.0017 109.461 9.22328Z"
            fill="black"/>
    </svg>
)

export default CartLayout;